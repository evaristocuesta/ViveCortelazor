@using ViveCortelazor.Extensions
@inject IViewLocalizer Localizer
@model string

@{
    // Use the provided ID or fall back to "languages" if not specified
    var dropdownId = string.IsNullOrEmpty(Model) ? "languages" : Model;
    var langEs = string.IsNullOrEmpty(Model) ? "lang-es" : $"{Model}-lang-es";
    var langEn = string.IsNullOrEmpty(Model) ? "lang-en" : $"{Model}-lang-en";
}

<li class="nav-item dropdown">
    <a id="@dropdownId" class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
        @Localizer[ViewContext.GetLang()]
    </a>
    <ul class="dropdown-menu">
        <li>
            <a id="@langEs" class="dropdown-item @IsActive("es")" href="@GetRoute("es")">
                Español
            </a>
        </li>
        <li>
            <a id="@langEn" class="dropdown-item @IsActive("en")" href="@GetRoute("en")">
                English
            </a>
        </li>
    </ul>
</li>

@{
    string IsActive(string language)
    {
        if (language.Equals(ViewContext.GetLang()))
        {
            return "active";
        }

        return string.Empty;
    }

    string? GetRoute(string lang)
    {
        string routeName = string.Empty;

        if (ViewContext.RouteData.Values.ContainsKey("page"))
        {
            routeName = $"{lang}/{ViewContext.RouteData.Values["page"]}";
            return Url.RouteUrlLang(routeName, lang);
        }

        if (ViewContext.RouteData.Values.ContainsKey("post"))
        {
            routeName = $"{lang}/blog/{ViewContext.RouteData.Values["post"]}";
            return Url.RouteUrlLang(routeName, lang);
        }

        routeName = $"{lang}/{ViewContext.RouteData.Values["action"]}";
        return Url.RouteUrlLang(routeName, lang);
    }
}